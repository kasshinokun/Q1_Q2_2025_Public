import base64
import fnmatch
from queue import Full
import tempfile
import shutil
import requests
import streamlit as st
import os
import re
import struct
from pathlib import Path
import time  # For simulating delays/retries if needed, and for timing operations
import filelock # For cross-platform file locking
import csv
import tempfile
import heapq
import io
import pandas as pd
import json
import logging
import traceback
import hashlib
import math
from matplotlib import pyplot as plt
from collections import Counter, defaultdict
from typing import Tuple, Optional, Dict, Callable,List, Union, Any, Iterator
from datetime import datetime, date
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import platform
import sys
from enum import Enum, auto
# --- Cryptography Imports (for RSA and AES) ---
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.exceptions import InvalidTag as CryptoInvalidTag # Renomeado para evitar conflito

def main():
    st.set_page_config(page_title="Traffic Accidents DB",
        layout="wide",
        page_icon="üöó"
    )

    # T√≠tulo principal da aplica√ß√£o
    st.title("Sistema de Gerenciamento de Dados de Acidentes de Tr√¢nsito")
    st.markdown("---") # Separador visual

    # Menu principal na sidebar
    st.sidebar.title("Navega√ß√£o Principal")
    st.sidebar.markdown("Selecione uma das etapas abaixo para interagir com o sistema.")
    main_option = st.sidebar.selectbox(
        "Escolha uma Se√ß√£o",
        ("Etapa 1", "Etapa 2", "Etapa 3", "Etapa 4","Administra√ß√£o do Sistema","Sobre"),
        help="Navegue entre as principais funcionalidades do sistema."
    )
    st.sidebar.markdown("---") # Separador visual

    # --- Conte√∫do da Etapa 1 ---
    if main_option == "Etapa 1":
        st.header("üóÑÔ∏è Etapa 1: Gerenciamento de Arquivo de Dados")
        st.write("Esta se√ß√£o permite opera√ß√µes diretas sobre o arquivo de dados principal.")
        st.markdown("---") # Separador visual

        st.sidebar.subheader("Op√ß√µes de Arquivo de Dados")
        sub_option_etapa1 = st.sidebar.selectbox(
            "Selecione uma A√ß√£o",
            ("Carregar dados do CSV", "Carregar dados do arquivo de dados",
             "Inserir um registro", "Editar um registro",
             "Apagar um registro", "Exportar dados como CSV"),
            help="Escolha a opera√ß√£o que deseja realizar no arquivo de dados."
        )

        st.info(f"Voc√™ est√° em: **Etapa 1** - **{sub_option_etapa1}**")

        if sub_option_etapa1 == "Carregar dados do CSV":
            st.subheader("üì§ Carregar Dados de um Arquivo CSV")
            st.write("Selecione um arquivo CSV para importar dados para o sistema.")
            uploaded_csv_file = st.file_uploader(
                "Arraste e solte seu arquivo CSV aqui ou clique para procurar.",
                type=["csv"],
                help="O arquivo CSV deve conter os dados dos acidentes."
            )
            if uploaded_csv_file is not None:
                st.success(f"Arquivo '{uploaded_csv_file.name}' carregado com sucesso! (Aguardando implementa√ß√£o da l√≥gica de processamento)")
                # Exemplo: df = pd.read_csv(uploaded_csv_file)
                # st.dataframe(df.head()) # Mostrar pr√©via dos dados
        elif sub_option_etapa1 == "Carregar dados do arquivo de dados":
            st.subheader("üì• Carregar Dados do Arquivo Interno (.db)")
            st.write("Carregue o arquivo de dados principal do sistema para visualiza√ß√£o ou processamento.")
            uploaded_db_file = st.file_uploader(
                "Selecione o arquivo de dados (.db)",
                type=["db"],
                help="Este √© o arquivo bin√°rio onde os registros de acidentes s√£o armazenados."
            )
            if uploaded_db_file is not None:
                st.success(f"Arquivo '{uploaded_db_file.name}' carregado com sucesso! (Aguardando implementa√ß√£o da l√≥gica de carregamento)")
        elif sub_option_etapa1 == "Inserir um registro":
            st.subheader("‚ûï Inserir Novo Registro")
            st.write("Preencha os campos abaixo para adicionar um novo registro de acidente ao banco de dados.")
            with st.form("insert_record_form"):
                # Exemplo de campos (personalize conforme seu schema de dados)
                col1, col2 = st.columns(2)
                with col1:
                    data_acidente = st.date_input("Data do Acidente", help="Selecione a data em que o acidente ocorreu.")
                    gravidade = st.selectbox("Gravidade", ["Leve", "Moderada", "Grave", "Fatal"], help="Selecione a gravidade do acidente.")
                with col2:
                    localizacao = st.text_input("Localiza√ß√£o", help="Ex: 'Rua X, Cidade Y, Estado Z'")
                    veiculos_envolvidos = st.number_input("Ve√≠culos Envolvidos", min_value=1, value=1, help="N√∫mero de ve√≠culos envolvidos no acidente.")
                observacoes = st.text_area("Observa√ß√µes", help="Quaisquer detalhes adicionais sobre o acidente.")

                submitted = st.form_submit_button("Inserir Registro")
                if submitted:
                    st.success("Registro submetido! (Aguardando l√≥gica de inser√ß√£o)")
                    st.json({ # Apenas para demonstra√ß√£o, remova na implementa√ß√£o real
                        "data_acidente": str(data_acidente),
                        "gravidade": gravidade,
                        "localizacao": localizacao,
                        "veiculos_envolvidos": veiculos_envolvidos,
                        "observacoes": observacoes
                    })
        elif sub_option_etapa1 == "Editar um registro":
            st.subheader("‚úèÔ∏è Editar Registro Existente")
            st.write("Localize um registro existente pelo seu ID e atualize suas informa√ß√µes.")
            record_id_edit = st.text_input("ID do Registro a Editar", help="Insira o identificador √∫nico do registro.")
            if record_id_edit:
                st.info(f"Buscando registro com ID: **{record_id_edit}**... (Aguardando l√≥gica de busca)")
                # Simular carregamento de dados para edi√ß√£o
                # if record_found:
                with st.form("edit_record_form"):
                    st.write("Preencha os campos abaixo para atualizar o registro:")
                    # Campos pr√©-preenchidos com dados do registro (simulados)
                    col1, col2 = st.columns(2)
                    with col1:
                        data_acidente_edit = st.date_input("Data do Acidente", value=date.today(), key="edit_data_acidente", help="Data atual para demonstra√ß√£o.")
                        gravidade_edit = st.selectbox("Gravidade", ["Leve", "Moderada", "Grave", "Fatal"], index=0, key="edit_gravidade")
                    with col2:
                        localizacao_edit = st.text_input("Localiza√ß√£o", value="Exemplo de Localiza√ß√£o", key="edit_localizacao")
                        veiculos_envolvidos_edit = st.number_input("Ve√≠culos Envolvidos", min_value=1, value=1, key="edit_veiculos")
                    observacoes_edit = st.text_area("Observa√ß√µes", value="Exemplo de observa√ß√µes para edi√ß√£o.", key="edit_obs")

                    edit_submitted = st.form_submit_button("Atualizar Registro")
                    if edit_submitted:
                        st.success(f"Registro com ID {record_id_edit} atualizado! (Aguardando l√≥gica de edi√ß√£o)")
                        st.json({ # Apenas para demonstra√ß√£o
                            "id": record_id_edit,
                            "data_acidente": str(data_acidente_edit),
                            "gravidade": gravidade_edit,
                            "localizacao": localizacao_edit,
                            "veiculos_envolvidos": veiculos_envolvidos_edit,
                            "observacoes": observacoes_edit
                        })
                # else: st.warning("Registro n√£o encontrado.")
        elif sub_option_etapa1 == "Apagar um registro":
            st.subheader("üóëÔ∏è Apagar Registro")
            st.write("Insira o ID do registro que deseja remover permanentemente do banco de dados.")
            record_id_delete = st.text_input("ID do Registro a Apagar", help="O ID √© o identificador √∫nico do registro.")
            if st.button("Apagar Registro", help="Esta a√ß√£o √© irrevers√≠vel!"):
                if record_id_delete:
                    st.warning(f"Tentando apagar registro com ID: **{record_id_delete}**... (Aguardando l√≥gica de exclus√£o)")
                    # if deletion_successful:
                    st.success(f"Registro com ID {record_id_delete} apagado com sucesso! (Aguardando confirma√ß√£o)")
                    # else: st.error("Falha ao apagar o registro. Verifique o ID.")
                else:
                    st.error("Por favor, insira um ID de registro para apagar.")
        elif sub_option_etapa1 == "Exportar dados como CSV":
            st.subheader("‚¨áÔ∏è Exportar Dados para CSV")
            st.write("Exporte todo o conte√∫do do arquivo de dados principal para um arquivo CSV.")
            if st.button("Gerar CSV para Download"):
                with st.spinner("Gerando arquivo CSV..."):
                    time.sleep(2) # Simula o processamento
                    # Na implementa√ß√£o real, voc√™ leria os dados do seu .db e os formataria em CSV
                    sample_data = "coluna1,coluna2,coluna3\nvalor1,valor2,valor3\nvalorA,valorB,valorC"
                    st.download_button(
                        label="Clique para Baixar CSV",
                        data=sample_data,
                        file_name="dados_acidentes.csv",
                        mime="text/csv",
                        help="Baixe o arquivo CSV gerado contendo todos os registros."
                    )
                    st.success("Arquivo CSV pronto para download!")

    # --- Conte√∫do da Etapa 2 ---
    elif main_option == "Etapa 2":
        st.header("üóÇÔ∏è Etapa 2: Gerenciamento de Arquivo de Dados e √çndice")
        st.write("Nesta etapa, voc√™ pode gerenciar o arquivo de dados juntamente com seus √≠ndices para otimiza√ß√£o de busca.")
        st.markdown("---") # Separador visual

        st.sidebar.subheader("Op√ß√µes de Dados e √çndice")
        sub_option_etapa2 = st.sidebar.selectbox(
            "Selecione uma A√ß√£o",
            ("Carregar dados do CSV", "Carregar arquivo de dados e √≠ndice",
             "Inserir um registro", "Editar um registro",
             "Apagar um registro", "Exportar arquivo de dados e √≠ndice como CSV"),
            help="Escolha a opera√ß√£o que envolve tanto o arquivo de dados quanto o arquivo de √≠ndice."
        )

        st.info(f"Voc√™ est√° em: **Etapa 2** - **{sub_option_etapa2}**")

        if sub_option_etapa2 == "Carregar dados do CSV":
            st.subheader("üì§ Carregar Dados de um Arquivo CSV (com √çndice)")
            st.write("Importe dados de um CSV e, opcionalmente, construa ou atualize um √≠ndice associado.")
            uploaded_csv_file_e2 = st.file_uploader(
                "Arraste e solte seu arquivo CSV aqui ou clique para procurar.",
                type=["csv"], key="csv_e2",
                help="O arquivo CSV ser√° usado para popular o banco de dados e o √≠ndice."
            )
            if uploaded_csv_file_e2 is not None:
                st.success(f"Arquivo '{uploaded_csv_file_e2.name}' carregado! (Aguardando l√≥gica de processamento com √≠ndice)")
        elif sub_option_etapa2 == "Carregar arquivo de dados e √≠ndice":
            st.subheader("üì• Carregar Arquivo de Dados (.db) e √çndice (.idx)")
            st.write("Selecione os arquivos de dados e √≠ndice para carregar o sistema completo.")
            uploaded_db_file_e2 = st.file_uploader(
                "Selecione o arquivo de dados (.db)",
                type=["db"], key="db_e2",
                help="Arquivo bin√°rio de registros."
            )
            uploaded_idx_file_e2 = st.file_uploader(
                "Selecione o arquivo de √≠ndice (.idx)",
                type=["idx"], key="idx_e2",
                help="Arquivo com a estrutura de √≠ndice para busca r√°pida."
            )
            if uploaded_db_file_e2 is not None and uploaded_idx_file_e2 is not None:
                st.success(f"Arquivos '{uploaded_db_file_e2.name}' e '{uploaded_idx_file_e2.name}' carregados! (Aguardando l√≥gica de carregamento)")
            elif uploaded_db_file_e2 is not None or uploaded_idx_file_e2 is not None:
                st.warning("Por favor, carregue AMBOS os arquivos (.db e .idx) para esta opera√ß√£o.")
        elif sub_option_etapa2 == "Inserir um registro":
            st.subheader("‚ûï Inserir Novo Registro (com Atualiza√ß√£o de √çndice)")
            st.write("Adicione um novo registro e garanta que o √≠ndice seja atualizado automaticamente.")
            with st.form("insert_record_form_e2"):
                col1, col2 = st.columns(2)
                with col1:
                    data_acidente = st.date_input("Data do Acidente", key="e2_data", help="Data do ocorrido.")
                    gravidade = st.selectbox("Gravidade", ["Leve", "Moderada", "Grave", "Fatal"], key="e2_gravidade")
                with col2:
                    localizacao = st.text_input("Localiza√ß√£o", key="e2_local", help="Local do acidente.")
                    veiculos_envolvidos = st.number_input("Ve√≠culos Envolvidos", min_value=1, value=1, key="e2_veiculos")
                observacoes = st.text_area("Observa√ß√µes", key="e2_obs")

                submitted_e2 = st.form_submit_button("Inserir Registro e Atualizar √çndice")
                if submitted_e2:
                    st.success("Registro submetido e √≠ndice atualizado! (Aguardando l√≥gica de inser√ß√£o)")
        elif sub_option_etapa2 == "Editar um registro":
            st.subheader("‚úèÔ∏è Editar Registro Existente (com Atualiza√ß√£o de √çndice)")
            st.write("Modifique um registro e tenha certeza que o √≠ndice refletir√° as mudan√ßas.")
            record_id_edit_e2 = st.text_input("ID do Registro a Editar", key="e2_edit_id")
            if record_id_edit_e2:
                st.info(f"Buscando registro com ID: **{record_id_edit_e2}**... (Aguardando l√≥gica de busca e edi√ß√£o)")
                with st.form("edit_record_form_e2"):
                    st.write("Atualize os campos:")
                    col1, col2 = st.columns(2)
                    with col1:
                        data_acidente_edit = st.date_input("Data do Acidente", value=date.today(), key="e2_edit_data")
                        gravidade_edit = st.selectbox("Gravidade", ["Leve", "Moderada", "Grave", "Fatal"], index=0, key="e2_edit_gravidade")
                    with col2:
                        localizacao_edit = st.text_input("Localiza√ß√£o", value="Exemplo de Localiza√ß√£o", key="e2_edit_local")
                        veiculos_envolvidos_edit = st.number_input("Ve√≠culos Envolvidos", min_value=1, value=1, key="e2_edit_veiculos")
                    observacoes_edit = st.text_area("Observa√ß√µes", value="Exemplo de observa√ß√µes para edi√ß√£o.", key="e2_edit_obs")
                    edit_submitted_e2 = st.form_submit_button("Atualizar Registro e √çndice")
                    if edit_submitted_e2:
                        st.success(f"Registro com ID {record_id_edit_e2} atualizado e √≠ndice refeito! (Aguardando l√≥gica de edi√ß√£o)")
        elif sub_option_etapa2 == "Apagar um registro":
            st.subheader("üóëÔ∏è Apagar Registro (com Atualiza√ß√£o de √çndice)")
            st.write("Remova um registro e veja o √≠ndice ser ajustado para refletir a exclus√£o.")
            record_id_delete_e2 = st.text_input("ID do Registro a Apagar", key="e2_delete_id")
            if st.button("Apagar Registro e Atualizar √çndice", key="e2_delete_btn"):
                if record_id_delete_e2:
                    st.warning(f"Tentando apagar registro com ID: **{record_id_delete_e2}** e seu √≠ndice... (Aguardando l√≥gica de exclus√£o)")
                    st.success(f"Registro com ID {record_id_delete_e2} e sua entrada no √≠ndice apagados! (Aguardando confirma√ß√£o)")
                else:
                    st.error("Por favor, insira um ID de registro para apagar.")
        elif sub_option_etapa2 == "Exportar arquivo de dados e √≠ndice como CSV":
            st.subheader("‚¨áÔ∏è Exportar Dados e √çndice para CSV")
            st.write("Esta op√ß√£o permite exportar os dados brutos e/ou informa√ß√µes do √≠ndice para um formato CSV.")
            export_type = st.radio(
                "O que voc√™ deseja exportar?",
                ("Apenas Dados", "Apenas √çndice", "Ambos (Dados e √çndice Relacionados)"),
                help="Escolha o tipo de informa√ß√£o a ser exportada."
            )
            if st.button("Gerar CSV(s) para Download", key="e2_export_btn"):
                with st.spinner(f"Gerando {export_type.lower()} para download..."):
                    time.sleep(2) # Simula processamento
                    # L√≥gica para gerar CSV de dados e/ou √≠ndice
                    if "Dados" in export_type:
                        sample_data_e2 = "coluna1,coluna2,coluna3\nvalorX,valorY,valorZ"
                        st.download_button(
                            label="Baixar Dados CSV",
                            data=sample_data_e2,
                            file_name="dados_acidentes_e2.csv",
                            mime="text/csv",
                            key="download_data_e2"
                        )
                    if "√çndice" in export_type:
                        sample_index_e2 = "id_registro,offset,tamanho\n1,0,100\n2,101,120"
                        st.download_button(
                            label="Baixar √çndice CSV",
                            data=sample_index_e2,
                            file_name="indice_acidentes_e2.csv",
                            mime="text/csv",
                            key="download_index_e2"
                        )
                    st.success(f"{export_type} pronto(s) para download!")

    # --- Conte√∫do da Etapa 3 ---
    elif main_option == "Etapa 3":
        st.header("üîê Etapa 3: Compacta√ß√£o e Criptografia")
        st.write("Otimize o armazenamento e a seguran√ßa dos seus dados aplicando t√©cnicas de compacta√ß√£o e criptografia.")
        st.markdown("---") # Separador visual

        st.sidebar.subheader("Op√ß√µes de Seguran√ßa e Otimiza√ß√£o")
        sub_option_etapa3 = st.sidebar.selectbox(
            "Selecione uma Ferramenta",
            ("Compacta√ß√£o", "Criptografia"),
            help="Escolha entre compactar dados para economizar espa√ßo ou criptograf√°-los para seguran√ßa."
        )

        st.info(f"Voc√™ est√° em: **Etapa 3** - **{sub_option_etapa3}**")

        if sub_option_etapa3 == "Compacta√ß√£o":
            st.subheader("üì¶ Compacta√ß√£o de Arquivos")
            st.write("Reduza o tamanho dos seus arquivos usando diferentes algoritmos de compacta√ß√£o.")
            compact_method = st.selectbox(
                "M√©todo de Compacta√ß√£o",
                ("Huffman", "LZW", "LZ78"),
                help="Selecione o algoritmo de compacta√ß√£o a ser utilizado."
            )
            compact_mode_selection = st.radio(
                "Modo de Opera√ß√£o",
                ("Padr√£o", "Escolha do Usu√°rio"),
                help="No modo 'Padr√£o', voc√™ compacta arquivos internos do sistema. No modo 'Escolha do Usu√°rio', voc√™ seleciona um arquivo local."
            )
            compact_action = st.selectbox(
                "A√ß√£o",
                ("Compactar", "Descompactar"),
                help="Escolha entre compactar um arquivo para reduzir seu tamanho ou descompactar para restaur√°-lo."
            )

            if compact_mode_selection == "Padr√£o" and compact_action == "Compactar":
                st.write("Selecione qual componente do sistema voc√™ deseja compactar:")
                st.selectbox(
                    "Tipo de Arquivo para Compactar",
                    ("Arquivo de Dados", "√çndice", "√Årvore B"),
                    help="Escolha o arquivo interno do sistema para compactar."
                )
                if st.button(f"{compact_action} Arquivo (Padr√£o)"):
                    with st.spinner(f"{compact_action} arquivo padr√£o com {compact_method}..."):
                        time.sleep(2) # Simula
                        st.success(f"Arquivo padr√£o {compact_action.lower()} com sucesso usando {compact_method}! (Aguardando l√≥gica)")
            elif compact_mode_selection == "Escolha do Usu√°rio":
                st.write("Carregue seu pr√≥prio arquivo para compactar ou descompactar.")
                uploaded_file_compact = st.file_uploader(
                    "Carregar arquivo para processamento",
                    type=["db", "idx", "btr", "huff", "lzw", "lz78", "csv"],
                    help="Arraste e solte arquivos nos formatos .db, .idx, .btr, .huff, .lzw, .lz78 ou .csv."
                )
                if uploaded_file_compact is not None:
                    st.info(f"Arquivo '{uploaded_file_compact.name}' carregado.")
                    if st.button(f"{compact_action} Arquivo", key="compact_user_file_btn"):
                        with st.spinner(f"{compact_action} '{uploaded_file_compact.name}' com {compact_method}..."):
                            time.sleep(3) # Simula
                            st.success(f"Arquivo '{uploaded_file_compact.name}' {compact_action.lower()} com sucesso usando {compact_method}! (Aguardando l√≥gica)")
                            st.download_button(
                                label=f"Baixar Arquivo {compact_action}",
                                data="conte√∫do_do_arquivo_processado", # Substituir pelo conte√∫do real
                                file_name=f"{Path(uploaded_file_compact.name).stem}_processed.bin", # Nome de arquivo de exemplo
                                mime="application/octet-stream",
                                help="Baixe o arquivo ap√≥s a opera√ß√£o de compacta√ß√£o/descompacta√ß√£o."
                            )

        elif sub_option_etapa3 == "Criptografia":
            st.subheader("üîí Criptografia de Arquivos")
            st.write("Proteja seus dados sens√≠veis aplicando criptografia avan√ßada.")
            crypto_method = st.selectbox(
                "M√©todo de Criptografia",
                ("Gerar Chaves RSA/Blowfish", "Blowfish", "AES-RSA"),
                help="Selecione o algoritmo de criptografia. 'Gerar Chaves' cria novos pares de chaves."
            )
            crypto_mode_selection = st.radio(
                "Modo de Opera√ß√£o",
                ("Padr√£o", "Escolha do Usu√°rio"),
                help="No modo 'Padr√£o', voc√™ criptografa arquivos internos do sistema. No modo 'Escolha do Usu√°rio', voc√™ seleciona um arquivo local e chaves."
            )
            crypto_action = st.selectbox(
                "A√ß√£o",
                ("Criptografar", "Descriptografar"),
                help="Escolha entre criptografar um arquivo para proteg√™-lo ou descriptograf√°-lo para acess√°-lo."
            )

            if crypto_method == "Gerar Chaves RSA/Blowfish":
                st.info("Esta op√ß√£o ir√° gerar um novo par de chaves RSA (p√∫blica/privada) e uma chave Blowfish.")
                if st.button("Gerar Novas Chaves", help="Isso pode levar alguns instantes."):
                    with st.spinner("Gerando chaves..."):
                        time.sleep(3) # Simula
                        st.success("Chaves geradas com sucesso! (Aguardando l√≥gica de gera√ß√£o)")
                        # No futuro, adicione bot√µes de download para as chaves geradas
                        st.download_button(
                            label="Baixar Chave P√∫blica (RSA)",
                            data="chave_publica_rsa_exemplo",
                            file_name="public_key.pem",
                            mime="application/x-pem-file"
                        )
                        st.download_button(
                            label="Baixar Chave Privada (RSA)",
                            data="chave_privada_rsa_exemplo",
                            file_name="private_key.pem",
                            mime="application/x-pem-file"
                        )
                        st.download_button(
                            label="Baixar Chave Blowfish",
                            data="chave_blowfish_exemplo",
                            file_name="blowfish_key.bin",
                            mime="application/octet-stream"
                        )
            else: # Blowfish ou AES-RSA
                if crypto_mode_selection == "Padr√£o" and crypto_action == "Criptografar":
                    st.write("Selecione qual componente do sistema voc√™ deseja criptografar:")
                    st.selectbox(
                        "Tipo de Arquivo para Criptografar",
                        ("Arquivo de Dados", "√çndice", "√Årvore B"),
                        help="Escolha o arquivo interno do sistema para criptografar."
                    )
                    if st.button("Autogerar Chaves e Criptografar (Padr√£o)", help="Utiliza chaves padr√£o do sistema para criptografia."):
                        with st.spinner(f"Criptografando arquivo padr√£o com {crypto_method} e chaves autogeradas..."):
                            time.sleep(3) # Simula
                            st.success(f"Arquivo padr√£o criptografado com sucesso usando {crypto_method}! (Aguardando l√≥gica)")
                elif crypto_mode_selection == "Escolha do Usu√°rio":
                    st.write("Carregue as chaves e o arquivo para criptografar/descriptografar.")
                    st.subheader("üîë Chave(s) de Criptografia")
                    uploaded_key_file = st.file_uploader(
                        "Carregar arquivo de chave (.pem)",
                        type=["pem", "bin"], # Blowfish key might be .bin
                        help="Para RSA, carregue a chave p√∫blica (.pem) para criptografar ou a privada (.pem) para descriptografar. Para Blowfish, a chave bin√°ria."
                    )
                    st.subheader("üìÑ Arquivo a ser Processado")
                    uploaded_file_crypto = st.file_uploader(
                        "Carregar arquivo para processamento",
                        type=["db", "idx", "btr", "enc", "enc_aes", "csv"],
                        help="Selecione o arquivo de dados (.db), √≠ndice (.idx), √°rvore B (.btr), ou arquivos j√° criptografados (.enc, .enc_aes, .csv)."
                    )
                    if uploaded_key_file is not None and uploaded_file_crypto is not None:
                        st.info(f"Chave '{uploaded_key_file.name}' e arquivo '{uploaded_file_crypto.name}' carregados.")
                        if st.button(f"{crypto_action} Arquivo", key="crypto_user_file_btn"):
                            with st.spinner(f"{crypto_action} '{uploaded_file_crypto.name}' com {crypto_method}..."):
                                time.sleep(3) # Simula
                                st.success(f"Arquivo '{uploaded_file_crypto.name}' {crypto_action.lower()} com sucesso usando {crypto_method}! (Aguardando l√≥gica)")
                                st.download_button(
                                    label=f"Baixar Arquivo {crypto_action}",
                                    data="conte√∫do_do_arquivo_processado", # Substituir pelo conte√∫do real
                                    file_name=f"{Path(uploaded_file_crypto.name).stem}_processed.bin", # Nome de arquivo de exemplo
                                    mime="application/octet-stream",
                                    help="Baixe o arquivo ap√≥s a opera√ß√£o de criptografia/descriptografia."
                                )
                    elif uploaded_key_file is not None or uploaded_file_crypto is not None:
                        st.warning("Por favor, carregue a chave e o arquivo a ser processado para continuar.")

    # --- Conte√∫do da Etapa 4 ---
    elif main_option == "Etapa 4":
        st.header("üîç Etapa 4: Casamento Padr√£o e Busca Avan√ßada")
        st.write("Utilize algoritmos eficientes para buscar padr√µes em seus dados.")
        st.markdown("---") # Separador visual

        st.sidebar.subheader("Op√ß√µes de Casamento Padr√£o")
        sub_option_etapa4 = st.sidebar.selectbox(
            "Selecione uma A√ß√£o de Busca",
            ("Gerar sistema de Busca por Aho-Corasik", "Buscar registros por Casamento Padr√£o"),
            help="Escolha entre construir uma estrutura para busca m√∫ltipla de padr√µes ou realizar uma busca direta."
        )

        st.info(f"Voc√™ est√° em: **Etapa 4** - **{sub_option_etapa4}**")

        if sub_option_etapa4 == "Gerar sistema de Busca por Aho-Corasik":
            st.subheader("‚öôÔ∏è Gerar Sistema de Busca por Aho-Corasik")
            st.write("Esta fun√ß√£o constr√≥i o aut√¥mato de Aho-Corasik a partir de um conjunto de padr√µes, otimizando a busca simult√¢nea de m√∫ltiplos termos.")
            st.caption("Escolha a etapa de constru√ß√£o do sistema:")
            st.selectbox(
                "Etapas de Gera√ß√£o",
                ("Etapa 1: Carregar Padr√µes", "Etapa 2: Construir Aut√¥mato"),
                help="Etapa 1: Defina os padr√µes de busca. Etapa 2: Construa a estrutura de Aho-Corasik."
            )
            if st.button("Gerar sistema de Busca por Aho-Corasik", help="Inicia a constru√ß√£o da estrutura de busca."):
                with st.spinner("Gerando sistema Aho-Corasik..."):
                    time.sleep(3) # Simula
                    st.success("Sistema de Busca por Aho-Corasik gerado com sucesso! (Aguardando l√≥gica)")
                    st.download_button(
                        label="Baixar Sistema Aho-Corasik",
                        data="dados_do_sistema_aho_corasik_serializados", # Substituir
                        file_name="aho_corasik_system.bin",
                        mime="application/octet-stream",
                        help="Baixe o arquivo bin√°rio do sistema Aho-Corasik gerado."
                    )
        elif sub_option_etapa4 == "Buscar registros por Casamento Padr√£o":
            st.subheader("üéØ Buscar Registros por Casamento Padr√£o")
            st.write("Pesquise registros no banco de dados utilizando algoritmos de casamento de padr√£o.")
            st.caption("Escolha a etapa da busca:")
            st.selectbox(
                "Etapas da Busca",
                ("Etapa 1: Carregar Dados de Busca", "Etapa 2: Executar Busca"),
                help="Etapa 1: Carregue os dados onde a busca ser√° realizada. Etapa 2: Execute a busca com o padr√£o definido."
            )
            pattern_to_locate = st.text_input(
                "Digite o padr√£o a ser localizado",
                help="Insira o texto ou padr√£o que voc√™ deseja encontrar nos registros.",
                placeholder="Ex: 'acidente grave', 'colis√£o lateral'"
            )
            if st.button("Buscar registros por Casamento Padr√£o", help="Inicia a busca pelo padr√£o especificado."):
                if pattern_to_locate:
                    with st.spinner(f"Buscando por '{pattern_to_locate}'..."):
                        time.sleep(4) # Simula
                        st.success(f"Busca por '{pattern_to_locate}' conclu√≠da! (Aguardando l√≥gica)")
                        st.subheader("Resultados da Busca:")
                        # Exemplo de exibi√ß√£o de resultados (voc√™ preencher√° com dados reais)
                        st.dataframe(pd.DataFrame({
                            "ID do Registro": [1, 5, 12],
                            "Localiza√ß√£o": ["Rua A, Bairro C", "Rodovia X", "Avenida Y"],
                            "Trecho Encontrado": ["Ocorreu um **acidente grave**.", "Colis√£o frontal em **acidente grave**.", "**acidente grave** pr√≥ximo ao sem√°foro"]
                        }))
                        st.info("Nenhum resultado encontrado para o padr√£o especificado." if not pattern_to_locate else "Resultados exibidos acima.")
                else:
                    st.error("Por favor, digite um padr√£o para realizar a busca.")

     # --- Conte√∫do da Administra√ß√£o do Sistema ---
    elif main_option == "Administra√ß√£o do Sistema":
        st.header("‚öôÔ∏è Administra√ß√£o do Sistema")
        st.write("Ferramentas para manuten√ß√£o e gerenciamento do banco de dados e arquivos do sistema.")
        st.markdown("---")

        st.subheader("üìä Backup e Exporta√ß√£o")
        col_backup, col_export = st.columns(2)
        with col_backup:
            if st.button("Realizar Backup Agora", key="backup_db_button", help="Cria uma c√≥pia de seguran√ßa do banco de dados principal."):
                with st.spinner("Realizando backup..."):
                    time.sleep(2) # Simula
                    st.success("Backup do banco de dados realizado com sucesso!")
                    # L√≥gica real para fazer backup
        with col_export:
            if st.button("Exportar Dados para CSV", key="export_csv_button", help="Exporta todo o conte√∫do do banco de dados para um arquivo CSV."):
                with st.spinner("Exportando para CSV..."):
                    time.sleep(2) # Simula
                    sample_data_admin = "col1,col2\nval1,val2\nval3,val4"
                    st.download_button(
                        label="Baixar Dados Exportados",
                        data=sample_data_admin,
                        file_name="dados_completos_backup.csv",
                        mime="text/csv",
                        key="download_admin_csv"
                    )
                    st.success("Dados exportados para CSV com sucesso!")

        st.markdown("---")

        admin_opt=st.selectbox(
            "Selecione o Escopo da Opera√ß√£o",
            ("Etapa 1: Apenas Banco de Dados", "Etapa 2: Banco de Dados e √çndices"),
            help="Escolha o n√≠vel de arquivos a serem importados ou gerenciados."
        )

        if admin_opt=="Etapa 1: Apenas Banco de Dados":
            st.subheader("‚¨ÜÔ∏è Importar Banco de Dados (.db)")
            st.write("Fa√ßa upload de um arquivo `.db` para restaurar ou substituir o banco de dados principal.")
            uploaded_file_import_db = st.file_uploader(
                "Selecione um arquivo .db para importar",
                type="db", key="import_db_uploader",
                help="Este arquivo substituir√° o banco de dados principal atual. Fa√ßa um backup antes!"
            )
            if uploaded_file_import_db is not None:
                st.success(f"Arquivo '{uploaded_file_import_db.name}' pronto para importa√ß√£o. (Aguardando a√ß√£o)")
                if st.button("Confirmar Importa√ß√£o de DB", key="confirm_import_db_btn"):
                    with st.spinner("Importando banco de dados..."):
                        time.sleep(3) # Simula
                        st.success("Banco de dados importado com sucesso!")

            st.markdown("---")
            st.subheader("‚ö†Ô∏è Excluir Banco de Dados Principal")
            st.warning("Esta a√ß√£o √© irrevers√≠vel e excluir√° *permanentemente* o arquivo do banco de dados principal (`traffic_accidents.db`). **Fa√ßa um backup antes!**")
            if st.button("Excluir Banco de Dados Principal", key="delete_db_button", help="Cuidado! Esta a√ß√£o n√£o pode ser desfeita."):
                if st.checkbox("Tenho certeza que quero excluir o banco de dados principal.", key="confirm_delete_db"):
                    with st.spinner("Excluindo banco de dados..."):
                        time.sleep(2) # Simula
                        st.error("Banco de dados principal exclu√≠do! (Aguardando l√≥gica de exclus√£o)")
                        st.info("Recomenda-se reiniciar a aplica√ß√£o para garantir a integridade.")
                else:
                    st.info("Confirme a exclus√£o marcando a caixa de sele√ß√£o.")

        if admin_opt=="Etapa 2: Banco de Dados e √çndices":
            st.subheader("‚¨ÜÔ∏è Importar Arquivos de √çndice e Banco de Dados")
            st.write("Fa√ßa upload de arquivos `.btr` (√Årvore B), `.inv` (√çndice Invertido) e `.idx` (√çndice Geral) para restaurar os √≠ndices do sistema, juntamente com o `.db`.")

            col_idx1, col_idx2, col_idx3 = st.columns(3)
            with col_idx1:
                uploaded_btr_file = st.file_uploader("Selecione √Årvore B (.btr)", type=["btr"], key="import_btr_uploader", help="Arquivo da estrutura de √Årvore B.")
                if uploaded_btr_file: st.success(f"'{uploaded_btr_file.name}' carregado.")
            with col_idx2:
                uploaded_inv_file = st.file_uploader("Selecione √çndice Invertido (.inv)", type=["inv"], key="import_inv_uploader", help="Arquivo do √çndice Invertido.")
                if uploaded_inv_file: st.success(f"'{uploaded_inv_file.name}' carregado.")
            with col_idx3:
                uploaded_idx_file = st.file_uploader("Selecione √çndice Geral (.idx)", type=["idx"], key="import_idx_uploader", help="Arquivo do √çndice Geral.")
                if uploaded_idx_file: st.success(f"'{uploaded_idx_file.name}' carregado.")

            st.subheader("‚¨ÜÔ∏è Importar Banco de Dados (.db) para Conjunto")
            uploaded_db_file_e2_admin = st.file_uploader(
                "Selecione o arquivo .db para este conjunto",
                type="db", key="import_db2_uploader",
                help="Este √© o arquivo de dados associado aos √≠ndices que voc√™ est√° importando."
            )
            if uploaded_db_file_e2_admin: st.success(f"'{uploaded_db_file_e2_admin.name}' carregado.")

            if st.button("Confirmar Importa√ß√£o de Banco de Dados e √çndices", key="confirm_import_full_btn"):
                if uploaded_btr_file or uploaded_inv_file or uploaded_idx_file or uploaded_db_file_e2_admin:
                    with st.spinner("Importando arquivos..."):
                        time.sleep(3) # Simula
                        st.success("Banco de Dados e √çndices importados com sucesso! (Aguardando l√≥gica de restaura√ß√£o)")
                else:
                    st.error("Por favor, carregue pelo menos um arquivo para importar.")

            st.markdown("---")
            st.subheader("‚ö†Ô∏è Excluir Banco de Dados Principal e √çndices")
            st.warning("Esta a√ß√£o √© irrevers√≠vel e excluir√° *permanentemente* o banco de dados principal (`traffic_accidents.db`), √Årvore B (`.btr`), √çndice Invertido (`.inv`) e √çndice Geral (`.idx`). **Fa√ßa um backup antes!**")
            if st.button("Excluir TUDO (DB e √çndices)", key="delete_2db_button", help="Esta √© uma exclus√£o completa. N√£o h√° volta!"):
                if st.checkbox("Tenho certeza que quero excluir o banco de dados principal e todos os √≠ndices.", key="confirm_delete_full"):
                    with st.spinner("Excluindo banco de dados e √≠ndices..."):
                        time.sleep(3) # Simula
                        st.error("Banco de dados principal e todos os √≠ndices exclu√≠dos! (Aguardando l√≥gica de exclus√£o)")
                        st.info("Recomenda-se reiniciar a aplica√ß√£o para garantir a integridade.")
                else:
                    st.info("Confirme a exclus√£o marcando a caixa de sele√ß√£o.")
        st.markdown("---")

        st.subheader("üìú Visualiza√ß√£o e Exclus√£o de Arquivos de Log")
        st.write("Acesse os logs do sistema para depura√ß√£o ou remova-os para liberar espa√ßo.")
        col_log_view, col_log_delete = st.columns(2)
        with col_log_view:
            if st.button("Visualizar Conte√∫do do Log", key="view_log_button", help="Exibe os registros de atividades do sistema."):
                st.info("Exibindo conte√∫do do log (Simula√ß√£o)...")
                st.code("2024-07-07 10:30:01 - INFO - Aplica√ß√£o iniciada.\n2024-07-07 10:35:15 - WARNING - Tentativa de acesso negada.")
                # L√≥gica real para ler e exibir o log
        with col_log_delete:
            if st.button("Excluir Arquivo de Log", key="delete_log_button", help="Remove o arquivo de log do sistema."):
                if st.checkbox("Confirmar exclus√£o do arquivo de log", key="confirm_delete_log"):
                    with st.spinner("Excluindo arquivo de log..."):
                        time.sleep(1) # Simula
                        st.success("Arquivo de log exclu√≠do com sucesso! (Aguardando l√≥gica)")
                else:
                    st.info("Marque a caixa para confirmar a exclus√£o do log.")

    # --- Conte√∫do da Se√ß√£o "Sobre" ---
    elif main_option == "Sobre":
        st.header("‚ÑπÔ∏è Sobre este Sistema")
        st.markdown("---")

        st.subheader("Autor")
        st.write("Desenvolvido por: [Gabriel da Silva Cassino](https://github.com/kasshinokun)")

        st.subheader("Descri√ß√£o do Projeto")
        st.write("""
        Este √© um sistema de gerenciamento de banco de dados de acidentes de tr√¢nsito
        com funcionalidades avan√ßadas de compress√£o (LZW e Huffman), criptografia (h√≠brida AES e RSA)
        e indexa√ß√£o eficiente usando uma estrutura de dados B-Tree e √çndice Invertido.
        """)
        st.write("""
        Desenvolvido como trabalho pr√°tico para a disciplina de **Algoritmos e Estruturas de Dados III**
        da gradua√ß√£o em Engenharia da Computa√ß√£o pela **PUC Minas Cora√ß√£o Eucar√≠stico**.
        """)
        st.write("O programa ser√° reconstru√≠do gradativamente. No reposit√≥rio da aplica√ß√£o (link abaixo), existem as pr√©vias iniciais.")
        st.markdown("Link do Reposit√≥rio: [Deploy da Aplica√ß√£o](https://github.com/kasshinokun/Q1_Q2_2025_Public/tree/main/Aulas_AED3/Python_Adapt/Deploy)")

        st.subheader("Tecnologias Utilizadas")
        st.markdown("""
        * **Python**: Linguagem de programa√ß√£o principal.
        * **Streamlit**: Para a interface de usu√°rio web interativa e √°gil.
        * **`cryptography`**: Biblioteca robusta para opera√ß√µes criptogr√°ficas (AES, RSA, Blowfish).
        * **`filelock`**: Para gerenciamento de concorr√™ncia e garantia da integridade do arquivo em opera√ß√µes multi-threaded/multi-processo.
        * **`pathlib`**: M√≥dulo para manipula√ß√£o de caminhos de arquivos e diret√≥rios de forma orientada a objetos.
        * **`pandas`**: Essencial para manipula√ß√£o e exibi√ß√£o de dados tabulares (DataFrames).
        * **`matplotlib`**: Para gera√ß√£o de gr√°ficos de compara√ß√£o e visualiza√ß√£o de dados (se implementado).
        * **`collections`**: M√≥dulos como `Counter` e `defaultdict` para estruturas de dados eficientes.
        * **`typing`**: Suporte para tipagem est√°tica, melhorando a clareza e manutenibilidade do c√≥digo.
        * **`concurrent.futures`**: Para gerenciamento de threads e processos, permitindo opera√ß√µes ass√≠ncronas.
        * **`threading`**: Para controle de threads de execu√ß√£o.
        """)
        st.write("Vers√£o: 1.0_20250707 Alpha")
        st.markdown("---")
        st.info("Agradecemos seu interesse em nossa aplica√ß√£o!")


if __name__ == "__main__":
    main()