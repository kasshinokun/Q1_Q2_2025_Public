import streamlit as st
import pandas as pd
import requests
import os

# --- Function to generate data.py file ---
def generate_data_py(df, output_folder="documents"):
    """
    Generates a Python file named 'data.py' with headerCSV and dataCSV lists.

    Args:
        df (pd.DataFrame): The input Pandas DataFrame.
        output_folder (str): The folder where 'data.py' will be saved.
    """
    st.info(f"Preparing to generate '{output_folder}/data.py'...")

    # Get column headers
    header_csv = df.columns.tolist()

    # Process data rows based on specified types
    data_csv = []
    for index, row in df.iterrows():
        processed_row = []
        for i, value in enumerate(row):
            try:
                if i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15]:
                    # Columns 0-13 and 15 are string variables
                    processed_row.append(str(value) if pd.notna(value) else "")
                elif i in [16, 17, 18, 19, 20, 21]:
                    # Columns 16-21 are float variables
                    processed_row.append(float(value) if pd.notna(value) else 0.0)
                elif i in [14, 22, 23, 24]:
                    # Columns 14 and 22-24 are int variables
                    processed_row.append(int(value) if pd.notna(value) else 0)
                else:
                    # Fallback for any other columns, though all should be covered
                    processed_row.append(str(value) if pd.notna(value) else "")
            except ValueError as e:
                # Handle cases where conversion might fail (e.g., non-numeric in numeric column)
                st.warning(f"Data type conversion error in row {index}, column {i} ('{df.columns[i]}'): {value} - {e}. Appending default value.")
                if i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15]:
                    processed_row.append("")
                elif i in [16, 17, 18, 19, 20, 21]:
                    processed_row.append(0.0)
                elif i in [14, 22, 23, 24]:
                    processed_row.append(0)
                else:
                    processed_row.append("")

        data_csv.append(processed_row)

    # Create the output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
        st.info(f"Created directory: '{output_folder}'")

    file_path = os.path.join(output_folder, "data.py")
    with open(file_path, "w", encoding="utf-8") as f:
        f.write("# This file was generated by a Streamlit application.\n")
        f.write("# It contains header and data from the 'traffic_accidents_pt_br_rev3.csv' file.\n\n")

        f.write("headerCSV = [\n")
        for header in header_csv:
            f.write(f"    '{header}',\n")
        f.write("]\n\n")

        f.write("dataCSV = [\n")
        # Write each row, ensuring correct representation for different types
        for row in data_csv:
            f.write("    [")
            f.write(", ".join(repr(item) for item in row)) # repr() correctly handles strings with quotes
            f.write("],\n")
        f.write("]\n")

    st.success(f"Successfully generated '{file_path}'!")
    st.download_button(
        label="Download data.py",
        data=open(file_path, "rb").read(),
        file_name="data.py",
        mime="text/x-python"
    )

# --- Streamlit Application Layout ---

st.set_page_config(layout="wide", page_title="CSV Data Processor")

st.title("ðŸ“Š CSV Data Processor and Python File Generator")
st.markdown("This application loads a CSV file from a specified URL, displays its content, and generates a Python file (`data.py`) containing the headers and processed data as Python lists.")

# Define the URL for the CSV file
csv_url = "https://raw.githubusercontent.com/kasshinokun/Q1_Q2_2025_Public/main/Aulas_AED3/TP_AEDS_III_E5/data/traffic_accidents_pt_br_rev3.csv"

st.write(f"Attempting to load data from: `{csv_url}`")

# --- Function to load CSV from URL (with caching) ---
@st.cache_data(show_spinner="Loading CSV data...")
def load_csv_from_url(url):
    """
    Loads a CSV file from a given URL into a Pandas DataFrame.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        # Use StringIO to read text content directly with pandas
        from io import StringIO
        csv_content = StringIO(response.text)
        df = pd.read_csv(csv_content)
        return df
    except requests.exceptions.ConnectionError:
        st.error("Connection Error: Could not connect to the URL. Please check your internet connection.")
        return None
    except requests.exceptions.Timeout:
        st.error("Timeout Error: The request took too long to complete.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching CSV from URL: {e}. Please ensure the URL is correct and accessible.")
        return None
    except Exception as e:
        st.error(f"An unexpected error occurred while loading CSV: {e}")
        return None

# Load the DataFrame
df = load_csv_from_url(csv_url)

if df is not None:
    st.success("CSV file loaded successfully!")
    st.subheader("Preview of Loaded DataFrame:")
    st.dataframe(df.head(10)) # Show first 10 rows

    st.subheader("DataFrame Information:")
    # Display df.info() in a more readable format for Streamlit
    buffer = pd.io.common.StringIO()
    df.info(buf=buffer)
    st.text(buffer.getvalue())

    st.subheader("Data Type Conversion and File Generation:")
    st.write("Click the button below to generate `data.py` with column types converted as follows:")
    st.markdown("""
    - **String (index 0-13, 15):** `acidente_fatal_br`, `tipo_acidente_br`, `causa_acidente_br`, `municipio_acidente_br`, `uf_acidente_br`, `regiao_acidente_br`, `classificacao_acidente_br`, `situacao_acidente_br`, `tipo_veiculo_br`, `marca_veiculo_br`, `modelo_veiculo_br`, `tipo_via_br`, `data_acidente_br`, `hora_acidente_br`, `faixa_horaria_br`
    - **Float (index 16-21):** `latitude_br`, `longitude_br`, `idade_condutor_br`, `tempo_habilitacao_condutor_br`, `velocidade_estimada_br`, `condicao_meteorologica_br`
    - **Integer (index 14, 22-24):** `dia_semana_acidente_br`, `sexo_condutor_br`, `estado_fisico_condutor_br`, `ano_acidente_br`
    """)

    if st.button("Generate data.py file"):
        generate_data_py(df)
else:
    st.warning("Failed to load the CSV file. Please check the provided URL and your network connection.")

